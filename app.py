from flask import Flask, request, jsonify, render_template
import whisper
import tempfile
import os
import re
import time
import shutil
import json
import warnings
from werkzeug.utils import secure_filename
from concurrent.futures import ThreadPoolExecutor
import threading

# –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è Whisper –æ FP16
warnings.filterwarnings("ignore", message="FP16 is not supported on CPU")

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è Vosk
try:
    import vosk
    VOSK_AVAILABLE = True
except ImportError:
    VOSK_AVAILABLE = False

app = Flask(__name__)
app.config['MAX_CONTENT_LENGTH'] = 16 * 1024 * 1024  # 16MB max file size

# –ö–ª–∞—Å—Å—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–∞–∑–Ω—ã–º–∏ –±—ç–∫–µ–Ω–¥–∞–º–∏
class WhisperBackend:
    def __init__(self):
        self.model = None
        self.name = "Whisper"
        self.loading = False
        self.loaded = False
        self.error = None
    
    def load_model_async(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏"""
        if self.loading or self.loaded:
            return
        
        self.loading = True
        self.error = None
        
        def load():
            try:
                print("üîÑ –ó–∞–≥—Ä—É–∂–∞—é Whisper Medium –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é...")
                self.model = whisper.load_model("medium")
                self.loaded = True
                print("‚úÖ Whisper Medium –∑–∞–≥—Ä—É–∂–µ–Ω!")
            except Exception as e:
                self.error = str(e)
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Whisper: {e}")
            finally:
                self.loading = False
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        thread = threading.Thread(target=load)
        thread.daemon = True
        thread.start()
    
    def is_ready(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≥–æ—Ç–æ–≤–∞ –ª–∏ –º–æ–¥–µ–ª—å –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"""
        return self.loaded and self.model is not None
    
    def is_loading(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –ª–∏ –º–æ–¥–µ–ª—å"""
        return self.loading
    
    def get_error(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—à–∏–±–∫—É –∑–∞–≥—Ä—É–∑–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å"""
        return self.error
    
    def transcribe(self, audio_file_path):
        if not self.is_ready():
            if self.is_loading():
                return "Whisper –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."
            elif self.get_error():
                return f"–û—à–∏–±–∫–∞ Whisper: {self.get_error()}"
            else:
                return "Whisper –Ω–µ –≥–æ—Ç–æ–≤, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ"
        
        try:
            result = self.model.transcribe(
                audio_file_path,
                language="ru",
                task="transcribe",
                temperature=0.0,
                best_of=5,
                beam_size=5,
                patience=1.0,
                length_penalty=1.0,
                suppress_tokens=[-1],
                initial_prompt="–≠—Ç–æ –∞—É–¥–∏–æ–∑–∞–ø–∏—Å—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∏ —á–∏—Ç–∞–µ–º—ã–º."
            )
            return result['text'].strip()
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è Whisper: {str(e)}"

class VoskBackend:
    def __init__(self):
        self.model = None
        self.name = "Vosk"
        self.load_model()
    
    def load_model(self):
        if not VOSK_AVAILABLE:
            return
        
        # –ü—É—Ç—å –∫ –º–æ–¥–µ–ª–∏ Vosk
        model_path = os.path.join(os.getcwd(), "models", "vosk-model-small-ru-0.22")
        if not os.path.exists(model_path):
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –º–æ–¥–µ–ª–µ–π
            os.makedirs("models", exist_ok=True)
            print("–ú–æ–¥–µ–ª—å Vosk –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–∫–∞—á–∞–π—Ç–µ –µ—ë —Å https://alphacephei.com/vosk/models")
            return
        
        try:
            print(f"üîÑ –ó–∞–≥—Ä—É–∂–∞—é –º–æ–¥–µ–ª—å Vosk –∏–∑: {model_path}")
            self.model = vosk.Model(model_path)
            print(f"‚úÖ –ú–æ–¥–µ–ª—å Vosk —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ Vosk: {e}")
    
    def transcribe(self, audio_file_path):
        if not self.model:
            return "–ú–æ–¥–µ–ª—å Vosk –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞"
        
        try:
            import wave
            import subprocess
            import tempfile
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∞—É–¥–∏–æ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è Vosk
            # Vosk —Ç—Ä–µ–±—É–µ—Ç 16kHz –º–æ–Ω–æ WAV —Ñ–∞–π–ª
            temp_wav = tempfile.NamedTemporaryFile(suffix='.wav', delete=False)
            temp_wav.close()
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º ffmpeg –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            cmd = [
                'ffmpeg', '-i', audio_file_path,
                '-ar', '16000',  # 16kHz sample rate
                '-ac', '1',      # mono
                '-acodec', 'pcm_s16le',  # 16-bit PCM
                '-f', 'wav',     # WAV format
                '-y',            # overwrite
                temp_wav.name
            ]
            
            result = subprocess.run(cmd, capture_output=True, text=True)
            if result.returncode != 0:
                print(f"FFmpeg error: {result.stderr}")
                return f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∞—É–¥–∏–æ: {result.stderr}"
            
            print(f"FFmpeg —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–ª: {audio_file_path} -> {temp_wav.name}")
            
            # –¢–µ–ø–µ—Ä—å —Ä–∞—Å–ø–æ–∑–Ω–∞–µ–º —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
            wf = wave.open(temp_wav.name, 'rb')
            print(f"–ê—É–¥–∏–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: channels={wf.getnchannels()}, sample_width={wf.getsampwidth()}, framerate={wf.getframerate()}, frames={wf.getnframes()}")
            
            if wf.getnchannels() != 1 or wf.getsampwidth() != 2 or wf.getframerate() != 16000:
                wf.close()
                os.unlink(temp_wav.name)
                return f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞—É–¥–∏–æ: channels={wf.getnchannels()}, width={wf.getsampwidth()}, rate={wf.getframerate()}"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ
            if wf.getnframes() == 0:
                wf.close()
                os.unlink(temp_wav.name)
                return "–ê—É–¥–∏–æ —Ñ–∞–π–ª –ø—É—Å—Ç"
            
            rec = vosk.KaldiRecognizer(self.model, wf.getframerate())
            print(f"Vosk recognizer —Å–æ–∑–¥–∞–Ω –¥–ª—è {wf.getframerate()}Hz")
            
            result_text = ""
            chunk_count = 0
            while True:
                data = wf.readframes(4000)
                if len(data) == 0:
                    break
                chunk_count += 1
                if rec.AcceptWaveform(data):
                    result = json.loads(rec.Result())
                    partial_text = result.get('text', '')
                    if partial_text:
                        print(f"Chunk {chunk_count}: {partial_text}")
                        result_text += partial_text + ' '
            
            # –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result = json.loads(rec.FinalResult())
            final_text = result.get('text', '')
            if final_text:
                print(f"Final result: {final_text}")
                result_text += final_text
            
            print(f"–û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç Vosk: '{result_text.strip()}'")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª–∏–Ω—É –∞—É–¥–∏–æ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º
            audio_duration = wf.getnframes() / wf.getframerate()
            wf.close()
            os.unlink(temp_wav.name)
            
            # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if not result_text.strip():
                return f"Vosk –Ω–µ —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å. –î–ª–∏–Ω–∞ –∞—É–¥–∏–æ: {audio_duration:.1f} —Å–µ–∫. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≥—Ä–æ–º–∫–æ—Å—Ç—å –∏ —á–µ—Ç–∫–æ—Å—Ç—å —Ä–µ—á–∏."
            
            return result_text.strip()
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è Vosk: {str(e)}"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±—ç–∫–µ–Ω–¥—ã
whisper_backend = None
vosk_backend = None

# –¢–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π –±—ç–∫–µ–Ω–¥
current_backend = None

def get_whisper_backend():
    global whisper_backend
    return whisper_backend

def get_vosk_backend():
    global vosk_backend
    if vosk_backend is None and VOSK_AVAILABLE:
        print("üîÑ –ó–∞–≥—Ä—É–∂–∞—é Vosk –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é...")
        vosk_backend = VoskBackend()
        print("‚úÖ Vosk –∑–∞–≥—Ä—É–∂–µ–Ω!")
    return vosk_backend

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±—ç–∫–µ–Ω–¥—ã —Å—Ä–∞–∑—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
print("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")

# –ó–∞–≥—Ä—É–∂–∞–µ–º Vosk
if VOSK_AVAILABLE:
    print("üîÑ –ó–∞–≥—Ä—É–∂–∞—é Vosk –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ...")
    vosk_backend = VoskBackend()
    print("‚úÖ Vosk –∑–∞–≥—Ä—É–∂–µ–Ω!")

# –ó–∞–≥—Ä—É–∂–∞–µ–º Whisper —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
print("üîÑ –ó–∞–≥—Ä—É–∂–∞—é Whisper Turbo –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ...")
whisper_backend = WhisperBackend()
try:
    whisper_backend.model = whisper.load_model("turbo")
    whisper_backend.loaded = True
    print("‚úÖ Whisper Turbo –∑–∞–≥—Ä—É–∂–µ–Ω!")
except Exception as e:
    whisper_backend.error = str(e)
    print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Whisper: {e}")

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Vosk –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π –±—ç–∫–µ–Ω–¥
if VOSK_AVAILABLE and vosk_backend:
    current_backend = vosk_backend
    print("‚úÖ Vosk —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π –±—ç–∫–µ–Ω–¥!")
else:
    current_backend = whisper_backend
    print("‚úÖ Whisper —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π –±—ç–∫–µ–Ω–¥!")

def post_process_text(text):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
    """
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—É–Ω–∫—Ç—É–∞—Ü–∏—é
    text = re.sub(r'\s+([,.!?;:])', r'\1', text)  # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –ø–µ—Ä–µ–¥ –∑–Ω–∞–∫–∞–º–∏
    text = re.sub(r'([.!?])\s*([–∞-—è—ë])', r'\1 \2', text)  # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –ø–æ—Å–ª–µ —Ç–æ—á–µ–∫
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã –≤ –Ω–∞—á–∞–ª–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
    sentences = re.split(r'([.!?])', text)
    result = []
    for i, sentence in enumerate(sentences):
        if sentence.strip() and not sentence in '.!?':
            # –î–µ–ª–∞–µ–º –ø–µ—Ä–≤—É—é –±—É–∫–≤—É –∑–∞–≥–ª–∞–≤–Ω–æ–π
            sentence = sentence.strip()
            if sentence:
                sentence = sentence[0].upper() + sentence[1:]
            result.append(sentence)
        else:
            result.append(sentence)
    
    text = ''.join(result)
    
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    text = re.sub(r'\s+', ' ', text).strip()
    
    return text

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/api/backend', methods=['POST'])
def switch_backend():
    global current_backend
    data = request.get_json()
    backend_name = data.get('backend', 'whisper')
    
    if backend_name == 'vosk':
        vosk_backend_instance = get_vosk_backend()
        if vosk_backend_instance:
            current_backend = vosk_backend_instance
            return jsonify({'success': True, 'backend': 'vosk', 'message': '–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ Vosk'})
        else:
            return jsonify({'success': False, 'error': 'Vosk –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'})
    elif backend_name == 'whisper':
        whisper_backend_instance = get_whisper_backend()
        current_backend = whisper_backend_instance
        
        if whisper_backend_instance.is_ready():
            return jsonify({'success': True, 'backend': 'whisper', 'message': '–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ Whisper Turbo'})
        else:
            return jsonify({'success': False, 'backend': 'whisper', 'error': f'Whisper –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {whisper_backend_instance.get_error()}'})
    else:
        return jsonify({'success': False, 'error': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±—ç–∫–µ–Ω–¥'})

@app.route('/api/whisper/status')
def get_whisper_status():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–∫–∏ Whisper"""
    whisper_backend_instance = get_whisper_backend()
    
    if whisper_backend_instance.is_ready():
        return jsonify({'status': 'ready', 'message': 'Whisper –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é'})
    elif whisper_backend_instance.is_loading():
        return jsonify({'status': 'loading', 'message': 'Whisper –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...'})
    elif whisper_backend_instance.get_error():
        return jsonify({'status': 'error', 'error': whisper_backend_instance.get_error()})
    else:
        return jsonify({'status': 'not_started', 'message': 'Whisper –Ω–µ –∑–∞–ø—É—â–µ–Ω'})

@app.route('/api/backends')
def get_backends():
    backends = [{'name': 'whisper', 'available': True, 'description': 'OpenAI Whisper Turbo - –±—ã—Å—Ç—Ä–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞'}]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Vosk
    if VOSK_AVAILABLE:
        backends.append({'name': 'vosk', 'available': True, 'description': 'Vosk - –±—ã—Å—Ç—Ä–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞'})
    else:
        backends.append({'name': 'vosk', 'available': False, 'description': 'Vosk - –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'})
    
    return jsonify({
        'current': current_backend.name.lower(),
        'backends': backends
    })

@app.route('/upload', methods=['POST'])
def upload_file():
    if 'audio' not in request.files:
        return jsonify({'error': 'No audio file provided'}), 400
    
    file = request.files['audio']
    if file.filename == '':
        return jsonify({'error': 'No file selected'}), 400
    
    try:
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with tempfile.NamedTemporaryFile(delete=False, suffix='.wav') as tmp_file:
            file.save(tmp_file.name)
            
            # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º –∞—É–¥–∏–æ —Å –ø–æ–º–æ—â—å—é —Ç–µ–∫—É—â–µ–≥–æ –±—ç–∫–µ–Ω–¥–∞
            original_text = current_backend.transcribe(tmp_file.name)
            
            # –ü–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏
            text = post_process_text(original_text)
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
            audio_filename = f"audio_{int(time.time())}.wav"
            audio_path = os.path.join("static", "audio", audio_filename)
            
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            os.makedirs(os.path.dirname(audio_path), exist_ok=True)
            
            # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª –≤ —Å—Ç–∞—Ç–∏—á–µ—Å–∫—É—é –ø–∞–ø–∫—É
            shutil.copy2(tmp_file.name, audio_path)
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            os.unlink(tmp_file.name)
            
            return jsonify({
                'success': True,
                'text': text,
                'original': original_text,  # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                'audio_url': f"/static/audio/{audio_filename}",  # URL –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
                'backend': current_backend.name  # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±—ç–∫–µ–Ω–¥–µ
            })
            
    except Exception as e:
        return jsonify({'error': f'Error processing audio: {str(e)}'}), 500

if __name__ == '__main__':
    app.run(debug=False, host='0.0.0.0', port=5000)
